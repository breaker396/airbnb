// <auto-generated />
using System;
using Airbnb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airbnb.Migrator.Migrations
{
    [DbContext(typeof(AirbnbDbContext))]
    [Migration("20241113082030_DB_Init")]
    partial class DB_Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Airbnb.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Category_ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Country_ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id")
                        .HasName("PK_Currency_ID");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Province_ID");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<long>("DeleteBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Guests")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19, 6)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_Room_ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Airbnb.Data.Models.RoomOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("Guests")
                        .HasColumnType("int");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_RoomOrder_ID");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomOrders");
                });

            modelBuilder.Entity("Airbnb.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK_User_ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Province", b =>
                {
                    b.HasOne("Airbnb.Data.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Province_CountryID");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Room", b =>
                {
                    b.HasOne("Airbnb.Data.Models.Category", "Category")
                        .WithMany("Rooms")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_CategoryID");

                    b.HasOne("Airbnb.Data.Models.Currency", "Currency")
                        .WithMany("Rooms")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_CurrencyID");

                    b.HasOne("Airbnb.Data.Models.Province", "Province")
                        .WithMany("Rooms")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_ProvinceID");

                    b.HasOne("Airbnb.Data.Models.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_UserID");

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("Province");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.Data.Models.RoomOrder", b =>
                {
                    b.HasOne("Airbnb.Data.Models.Room", "Room")
                        .WithMany("RoomOrders")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomOrder_RoomID");

                    b.HasOne("Airbnb.Data.Models.User", "User")
                        .WithMany("RoomOrders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomOrder_UserID");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Category", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Currency", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Province", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Airbnb.Data.Models.Room", b =>
                {
                    b.Navigation("RoomOrders");
                });

            modelBuilder.Entity("Airbnb.Data.Models.User", b =>
                {
                    b.Navigation("RoomOrders");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
